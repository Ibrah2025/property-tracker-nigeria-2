  const [isCreatingDefaults, setIsCreatingDefaults] = useState(false)
  
  const fetchAllData = async () => {
    try {
      setLoading(true)
      
      // Fetch projects
      let projectsSnapshot = await getDocs(collection(db, 'projects'))
      let projectsData = projectsSnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data()
      }))
      
      // Only create defaults once, with a flag to prevent concurrent creation
      if (projectsData.length === 0 && !isCreatingDefaults) {
        setIsCreatingDefaults(true)
        
        // Check one more time before creating
        const doubleCheck = await getDocs(collection(db, 'projects'))
        if (doubleCheck.docs.length === 0) {
          const defaultProjects = [
            { name: 'Maitama Heights', budget: 15000000, location: 'Maitama, Abuja', status: 'active' },
            { name: 'Garki Site', budget: 12000000, location: 'Garki, Abuja', status: 'active' },
            { name: 'Jabi Lakeside', budget: 25000000, location: 'Jabi, Abuja', status: 'active' },
            { name: 'Asokoro Residences', budget: 18000000, location: 'Asokoro, Abuja', status: 'active' },
            { name: 'Katampe Hills', budget: 20000000, location: 'Katampe, Abuja', status: 'active' },
            { name: 'Wuse II Towers', budget: 30000000, location: 'Wuse II, Abuja', status: 'active' }
          ]
          
          // Create exactly 6 projects
          for (const project of defaultProjects) {
            await addDoc(collection(db, 'projects'), {
              ...project,
              createdAt: new Date().toISOString()
            })
          }
          
          // Re-fetch after creation
          projectsSnapshot = await getDocs(collection(db, 'projects'))
          projectsData = projectsSnapshot.docs.map(doc => ({
            id: doc.id,
            ...doc.data()
          }))
        }
        
        setIsCreatingDefaults(false)
      }
      
      setProjects(projectsData)
